/* global requirejs, mocha, Mocha */

//Testing setup
var testing = (function() {
   //Exceptions logger
   var logException = function(exception) {
      console.error(exception);

      var node = document.getElementById('exception');
      if (!node) {
         node = document.createElement('div');
         node.setAttribute('id', 'exception');
         document.getElementsByTagName('body')[0].appendChild(node);
      }

      var text = document.createElement('div');
      text.textContent = exception.stack || exception;
      node.appendChild(text);
   };

   //Loads script with DOM element
   var loadScript = function(url, cfg) {
      var script = document.createElement('script'),
         startNode = document.getElementById('testing-init');
      if (cfg) {
         Object.assign(script, cfg)
      }

      return new Promise(function(resolve, reject) {
         script.src = url;
         script.async = false;
         startNode.parentNode.appendChild(script);

         script.addEventListener('load', resolve, false);
         script.addEventListener('error', function() {
            reject(new Error('Could not load URL "' + url + '"'));
         }, false);
      });
   };

   //Creates report DOM Node
   var createDomReport = function(id, text) {
      var domElement = document.getElementById(id);
      if (!domElement) {
         domElement = document.createElement('textarea');
         domElement.setAttribute('id', id);
         domElement.setAttribute('readonly', 'readonly');
         document.getElementsByTagName('body')[0].appendChild(domElement);
      }

      domElement.value = text;

      return domElement;
   };

   //Testing framework setup
   var initTestingFramework = function() {
      mocha.setup({
         globals: ['cov_*'],
         ignoreLeaks: '{{CHECK_LEAKS}}' === 'ignore' ? true : false,
         ui: 'bdd',
         reporter: function(runner) {
            var query = typeof window === 'undefined' ? '?reporter=XUnit' : window.location.search;
            var result = query.match(new RegExp('[?&]reporter=([^&]*)&?$'));
            var reporterCode = result ? result[1] : 'HTML';

            //JSCoverage it's a virtual reporter just alias of HTML
            if (reporterCode === 'JSCoverage' && Mocha.reporters.HTML) {
               Mocha.reporters.JSCoverage = Mocha.reporters.HTML;
            }

            if (!(reporterCode in Mocha.reporters)) {
               throw new Error('Reporter "' + reporterCode + '" is undefined.');
            }

            var reporter = new Mocha.reporters[reporterCode](runner, {});
            switch (reporterCode) {
               case 'XUnit':
                  //Change XUnit output stream
                  var buffer = [];
                  reporter.write = function(line) {
                     buffer.push(line);
                  };
                  runner.on('end', function() {
                     createDomReport('report', buffer.join('\n'));
                  });
                  break;
            }

            runner.on('end', function() {
               if (window.__coverage__) {
                  createDomReport('coverageReport', JSON.stringify(window.__coverage__));
               }
            });
         }
      });

      window.assert = chai.assert;
   };

   //WS setup
   var initWs = function(config) {
      window.wsConfig = config;
   };

   //Loads startup scripts
   var loadScripts = function(urls) {
      return Promise.all(urls.filter(function(url) {
         return !!url;
      }).map(function(url) {
         return loadScript(url, {async: false});
      }.bind(this)));
   };

   //Load testing code
   var loadTestList = function(type) {
      return new Promise(function(resolve, reject) {
         switch (type) {
            case 'esm':
               fetch('~test-list.json').then(function(response) {
                  response.json().then(function(data) {
                     Promise.all(data.map(function(url) {
                        return loadScript(url, {type: 'module'});
                     })).then(resolve).catch(reject);
                  });
               }).catch(reject);
               break;

            case 'amd':
               var runTesting = function() {
                  requirejs(['~test-list'], resolve, reject);
               };
               var dependencies = {{DEPENDENCIES}};
               if (dependencies) {
                  requirejs(dependencies, runTesting, reject);
               } else {
                  runTesting();
               }
               break;

            default:
               throw new Error('Unsupported module type ' + type);
         }
      });
   };

   //Runs testing
   var runTesting = function() {
      mocha.run(finishTesting);
   };

   //After testing finished
   var finishTesting = function() {
      document.getElementsByTagName('body')[0].className += ' tests-finished';
   };

   function initApp() {
      if (!{{WS_APP_EXISTS}}) {
         return Promise.resolve();
      }

      return new Promise(function(resolve, reject) {
         requirejs(['Application/Initializer'], function(Initializer) {
            try {
               Initializer.default();
               // создаем новый Request для каждого test-case
               let fakeReq = {};
               let fakeRes = {};
               Initializer.startRequest(undefined, undefined, () => fakeReq, () => fakeRes);

               resolve();
            } catch (err) {
               reject(err);
            }
         }, reject);
      });
   }

   return {
      title: '{{TITLE}} v.{{VERSION}}',
      moduleType: '{{MODULE_TYPE}}',
      scripts: {{STARTUP_SCIPTS}},

      //Run testing
      run: function() {
         this.init().then(function() {
            loadTestList(this.moduleType).then(runTesting).catch(logException);
         }.bind(this)).catch(logException);
      },

      //Init testing
      init: function() {
         if (this.title) {
            document.title = this.title;
         }

         initTestingFramework();
         initWs(this.wsConfig);

         return loadScripts(this.scripts).then(initApp);
      },

      //WS config getter
      get wsConfig() {
         return {{WS_CONFIG}};
      }
   };
})();

//Initial config for RequireJS which helps use mocha, chai and sinon as dependencies in test packages
var require = {
   paths: {
      chai: 'node_modules/chai/chai',
      mocha: 'node_modules/mocha/mocha',
      sinon: 'node_modules/sinon/pkg/sinon',
      tslib: 'node_modules/saby-typescript/tslib'
   }
};

{{POST_SCRIPTS}}
